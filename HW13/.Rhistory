#Introduction to R tutorial for STOR 455 Section 1
#authored by Robin Cunningham
#This script is based on "R Programming for Data Science"" by Roger Peng and work of Iain Carmichael
#Introduction to R tutorial for STOR 455 Section 1
#authored by Robin Cunningham
#This script is based on "R Programming for Data Science"" by Roger Peng and work of Iain Carmichael
a
a <- 2 #assign the number 2 to the variable a
b <- 1
c = 3 #you can use <- or =
d <- 4.5
a
##[1]2
b
c
d
a+d
b*c
msg <- "hello world"
print(msg)
msg
A <- TRUE
B <- FALSE
A|B
A&B
pop <- c(792862, 431746,279639, 245475,236441)
pop
mean(pop)
median(pop)
min(pop)
max(pop)
sd(pop) #standard deviation
pop[2] #Get the second element of the vector
vec <- 1:5
vec
cities <- c("Charlotte", "Raleigh", "Greensboro", "Durham", "Winston-Salem")
getwd
getwd
getwd（）
1216-2.35*151/(145)^(1/2)
1216+2.35*151/(145)^(1/2)
> transmute(flights, sched_dep_time =
(sched_dep_time%%100)*60+sched_dep_time%%100,dep_time=(dep_time
%%100)*60+dep_time%%100)
transmute(flights, sched_dep_time =
(sched_dep_time%%100)*60+sched_dep_time%%100,dep_time=(dep_time
%%100)*60+dep_time%%100)
flights
library(nycflights13)
library(tidyverse)
transmute(flights, sched_dep_time =
(sched_dep_time%%100)*60+sched_dep_time%%100,dep_time=(dep_time
%%100)*60+dep_time%%100)
transmute(flights, sched_dep_time =
(sched_dep_time%/%100)*60+sched_dep_time%/%100,dep_time=(dep_time
%/%100)*60+dep_time%/%100)
knitr::opts_chunk$set(echo = TRUE)
mtcarsmean <-  vector("double", ncol(mtcars))
names(mtcarsmean) <-  names(mtcars)
for (i in names(mtcars)) {
mtcarsmean[[1]] <-  mean(mtcars[[i]])
}
mtcarsmean
install.packages("nycflights13")
data("flights")
output <- vector("list", ncol(flights))
install.packages("nycflights13")
data("flights")
output <- vector("list", ncol(flights))
data("flights", package = "nycflights13")
type <- vector("list", ncol(flights))
names(type) <- names(flights)
for (i in names(flights)) {
type[[i]] <- class(flights[[i]])
}
type
data(iris)
iris_uniq <- vector("double", ncol(iris))
names(iris_uniq) <- names(iris)
for (i in names(iris)) {
iris_uniq[i] <- length(unique(iris[[i]]))
}
iris_uniq
data(iris)
uniq_value <- vector("double", ncol(iris))
names(uniq_value) <- names(iris)
for (i in names(iris)) {
uniq_value[i] <- length(unique(iris[[i]]))
}
uniq_value
n <- 10
mu <- c(-10, 0, 10, 100)
normal <- vector("list", length(mu))
for (i in seq_along(normal)) {
normal[[i]] <- rnorm(n, mean = mu[i])
}
normal
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
mu <- c(-10, 0, 10, 100)
normal <- vector("list", length(mu))
for (i in seq_along(normal)) {
normal[[i]] <- rnorm(n, mean = mu[i])
}
normal
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
# values of the mean
mu <- c(-10, 0, 10, 100)
normals <- vector("list", length(mu))
for (i in seq_along(normals)) {
normals[[i]] <- rnorm(n, mean = mu[i])
}
normals
n <- 10
mu <- c(-10, 0, 10, 100)
normal <- vector("list", length(mu))
for (i in seq_along(normal)) {
normal[[i]] <- rnorm(n, mean = mu[i])
}
normal
mtcarsmean <-  vector("double", ncol(mtcars))
names(mtcarsmean) <-  names(mtcars)
for (i in names(mtcars)) {
mtcarsmean[[1]] <-  mean(mtcars[[i]])
}
mtcarsmean
data("flights", package = "nycflights13")
type <- vector("list", ncol(flights))
names(type) <- names(flights)
for (i in names(flights)) {
type[[i]] <- class(flights[[i]])
}
type
data(iris)
uniq_value <- vector("double", ncol(iris))
names(uniq_value) <- names(iris)
for (i in names(iris)) {
uniq_value[i] <- length(unique(iris[[i]]))
}
uniq_value
out <- ""
for (x in letters) {
out <- stringr::str_c(out, x)
}
x <- sample(100)
sd <- 0
for (i in seq_along(x)) {
sd <- sd + (x[i] - mean(x)) ^ 2
}
sd <- sqrt(sd / (length(x) - 1))
x <- runif(100)
out <- vector("numeric", length(x))
out[1] <- x[1]
for (i in 2:length(x)) {
out[i] <- out[i - 1] + x[i]
}
out <- ""
for (x in letters) {
out <- stringr::str_c(out, x)
}
x <- sample(100)
sd <- 0
for (i in seq_along(x)) {
sd <- sd + (x[i] - mean(x)) ^ 2
}
sd <- sqrt(sd / (length(x) - 1))
x <- runif(100)
out <- vector("numeric", length(x))
out[1] <- x[1]
for (i in 2:length(x)) {
out[i] <- out[i - 1] + x[i]
}
x <- sample(100)
sd <- 0
for (i in seq_along(x)) {
sd <- sd + (x[i] - mean(x)) ^ 2
}
sd <- sqrt(sd / (length(x) - 1))
sd(x)
x <- runif(100)
out <- vector("numeric", length(x))
out[1] <- x[1]
for (i in 2:length(x)) {
out[i] <- out[i - 1] + x[i]
}
#1
map_dbl(mtcars, mean)
#1
map_dbl(mtcars, mean)
#1
map_dbl(mtcars, mean)
output <- vector("double", ncol(mtcars))
names(output) <- names(mtcars)
for (i in names(mtcars)) {
output[i] <- mean(mtcars[[i]])
}
output
means <- vector("double", ncol(mtcars))
names(means) <- names(mtcars)
for (i in names(mtcars)) {
means[i] <- mean(mtcars[[i]])
}
means
means <- vector("double", ncol(mtcars))
names(means) <- names(mtcars)
for (i in names(mtcars)) {
means[i] <- mean(mtcars[[i]])
}
means
map(1:5, runif)
map(-2:2, rnorm, n = 5)
map_dbl(-2:2, rnorm, n = 5)
setwd("~/Desktop")
setwd("~/Downloads")
setwd("~/Desktop/STOR 455/HW13")
gpa <- read.csv("College GPA.csv")
gpa
n <- nrow(gpa)
n
Y<- c(gpa$First.Yr.GPA)
X1 <- c(gpa$Math.SAT)
X2 <- c(gpa$Verbal.SAT)
X3 <- c(gpa$HS.Math.GPA)
X4 <- c(gpa$HS.English.GPA)
Beta_hat1 = as.vector(matrix(0,nrow=5))
Beta_hat1
Beta_hat= matrix(Beta_hat1,nrow=5,byrow=TRUE)
Beta_hat
Y <- matrix(y,nrow=n,byrow=TRUE)
Beta_hat= matrix(Beta_hat1,nrow=5,byrow=TRUE)
Beta_hat
Y <- matrix(Y,nrow=n,byrow=TRUE)
Y
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
X_trans=t(X)
XtransX=X_trans%*%X
XtransX_inv=solve(XtransX)
Beta_hat=XtransX_inv%*%X_trans%*%Y
Beta_hat
labels = matrix(c("Beta_0", "Beta_1", "Beta_2", "Beta_3", "Beta_4"), nrow = 5)
beta_summary <- cbind(labels, Beta_hat)
beta_summary
n <- nrow(gpa)
n
Y<- c(gpa$First.Yr.GPA)
X1 <- c(gpa$Math.SAT)
X2 <- c(gpa$Verbal.SAT)
X3 <- c(gpa$HS.Math.GPA)
X4 <- c(gpa$HS.English.GPA)
Beta_hat = numeric(length = n)
Beta_hat
n <- nrow(gpa)
n
Y<- c(gpa$First.Yr.GPA)
X1 <- c(gpa$Math.SAT)
X2 <- c(gpa$Verbal.SAT)
X3 <- c(gpa$HS.Math.GPA)
X4 <- c(gpa$HS.English.GPA)
Beta_hat = numeric(length = 5)
Beta_hat
Beta_hat = matrix(Beta_hat, nrow = n, ncol=1)
print("Beta_hat = ")
Y <- matrix(Y,nrow=n,byrow=TRUE)
Y
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
Beta_hat= matrix(Beta_hat1,nrow=n,byrow=TRUE)
Beta_hat
Y <- matrix(Y,nrow=n,byrow=TRUE)
Y
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
Beta_hat= matrix(Beta_hat1,nrow=5,byrow=TRUE)
Beta_hat
Y <- matrix(Y,nrow=n,byrow=TRUE)
Y
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
Beta_hat= matrix(Beta_hat1,nrow=5,byrow=TRUE)
Beta_hat
matrixY = matrix(Y, nrow = n, ncol=1)
matrixY
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
df= 15
t=qt(0.975,df)
t
se_b4=0.1764963
pe_b4=0.0875637
upper=pe_b4+se_b4*t
upper
lower=pe_b4-se_b4*t
lower
df= 15
t=qt(0.975,df)
t
se=0.1764963
pe=0.0875637
upper=pe+se*t
upper
lower=pe-se*t
lower
GPA=640*0.0020102+540*0.0012522+3.8*0.1894402+3.2*0.0875637+0.1615496
GPA
df= 15
t=qt(0.975,df)
se=0.1764963
pe=0.0875637
upper=pe+se*t
upper
lower=pe-se*t
lower
df= 15
t=qt(0.975,df)
s=0.2685
x=matrix(c(1,640,540,3.8,3.2),byrow = TRUE)
C=Inverse
df= 15
t=qt(0.975,df)
s=0.2685
x=matrix(c(1,640,540,3.8,3.2),byrow = TRUE)
C=Inverse
df= 15
t=qt(0.975,df)
s=0.2685
x=matrix(c(1,640,540,3.8,3.2),byrow = TRUE)
C=solve(X_TRANSX)
df= 15
t=qt(0.975,df)
s=0.2685
x=matrix(c(1,640,540,3.8,3.2),byrow = TRUE)
C=solve(t(X)%*%X)
se= s*sqrt(1+t(x)%*%C%*%x)
upper=GPA+se*t
upper
lower=GPA-se*t
lower
plot(X1,Y)
plot(X2,Y)
plot(X3,Y)
plot(X4,Y)
plot(X1,Y)
plot(X2,Y)
plot(X3,Y)
plot(X4,Y)
hist(Y)
hist(X1)
hist(X2)
hist(X3)
hist(X4)
plot(gpa.mlr,which=1:2)
Beta_hat= matrix(Beta_hat,nrow=5,byrow=TRUE)
Beta_hat
matrixY = matrix(Y, nrow = n, ncol=1)
matrixY
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
Beta_hat = numeric(length = 5)
Beta_hat
Beta_hatm= matrix(Beta_hat,nrow=5,byrow=TRUE)
Beta_hatm
matrixY = matrix(Y, nrow = n, ncol=1)
matrixY
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
Beta_hat = numeric(length = 5)
Beta_hat
Beta_hatm= matrix(Beta_hat,nrow=5,byrow=TRUE)
Beta_hatm
Y<- c(gpa$First.Yr.GPA)
matrixY = matrix(Y, nrow = n, ncol=1)
matrixY
X= matrix(1,nrow=n,ncol=5)
X[,2]=X1
X[,3]=X2
X[,4]=X3
X[,5]=X4
X
plot(gpa.mlr,which=1:2)
df= 15
t=qt(0.975,df)
s=0.2685
x=matrix(c(1,640,540,3.8,3.2),byrow = TRUE)
C=solve(t(X)%*%X)
se= s*sqrt(t(x)%*%C%*%x)
upper=GPA+se*t
upper
lower=GPA-se*t
lower
